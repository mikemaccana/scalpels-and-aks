doctype html
html
	head
			title ðŸ”ª and ðŸ”«
			meta(charset='utf-8')
			script(src='slides.js')
			link(href='css/styles.css'  rel='stylesheet' type='text/css')
		body
			section.slides.layout-regular.template-default

				article
					p Yaay the projector works
					small You may need to zoom out a little if the text is too big

				article.first
					h1(style="text-transform: uppercase") Scalpels and AKs
					h2 Scrape anything with node.js
					br
					h3
						a(href='http://twitter.com/mikemaccana',style="text-decoration: none;") @mikemaccana

				article.plain
					h1 THIS <br>WILL<br> WORK.

				article
					img(src="images/ev-ssl.png")
					h2 <br/>CertSimple does EV
					p Confirms legal entity behind a site
					p Normally a pain in the arse to get.

				article.plain
					h1(style="font-size: 192pt; line-height: 158pt;") CertSimple do EV 40-100x faster than Symantec, GoDaddy, and Comodo.

				article
					h2 We connect to:
					ul.build
						li Government data for 100M companies in 63 countries
						li 60+ independent data sources
						li Other data sources: DNS, whois, and a CA.

				article
					h1 Problem
					ul.build
						li Some data sources don't have APIs at all
						li API exists, but missing some functionality exposed through UI
						li No webhooks, so no realtime

				article
					h2 How to scrape anything you want

				article
					h1 THE SCALPEL
					p Use this 95% of the time

				article
					h1 LOG IN and SCRAPE

				article
					h2 How to log in - cookies!
					.comparison
						.option
							p Using plain request:
							pre.prettyprint
								code(data-lang="javascript") var request = require('request').defaults({jar: true})

						.option
							p Using superagent:
							pre.prettyprint
								code(data-lang="javascript") var superagent = require('superagent').agent();




				article
					h1 Why Cheerio?
					ul.build
						li Way smaller and less complex than JSDOM
						li Pure JS, no compilation needed.
						li Familiar

				article
					h2 Typical login & CSRF with cheerio
					pre.prettyprint
						code(data-lang="javascript").
							agent
							.get(loginUrl)
							.end(function(err, res){

								var $ = cheerio.load(res.text);

								var loginDetails = {}

								// Collect the whole form - typically includes a CSRF token
								$('form input').each(function(index, element){
									loginDetails[element.attribs.name] = element.attribs.value
								});
								loginDetails.username = username
								loginDetails.password = password

								agent
								.post(loginUrl)
								// Superagent uses JSON by default
								.type('form')
								.set('Referer', 'https://www.somesite.com/account/login.php')
								.send(loginDetails)
								.end(function(err, res){
									...
								})
							})

				article
					h1 Complete node scalpel approach

				article
					h2 Scraping module
					pre.prettyprint
						code(data-lang="javascript").
							var superagent = require('superagent').agent();

							var getLoggedInAgent = function(){
								...see previous example...
								cb(null, loggedInAgent)
							}

							module.exports = function(username, password, cb){

								getLoggedInAgent(username, password, function(err, loggedInAgent){

									var getCoolThing = function(){
										loggedInAgent...
									}

									var getOtherCoolThing = function(){
										loggedInAgent...
									}

									cb(null, {
										...
										getCoolThing,
										getOtherCoolThing
									})
								})
							}

				article
					h2 The scalpel doesn't work on:
					ul.build
						li pages generated by JS
						li Single page apps without a 'fastboot' option
						li This monstrosity: http://directwebremoting.org/dwr/index.html
				article
					h1 THE AK47
					p Use this 5% of the time

				article
					q When you absolutely, positively, got to get every datum in the site

				article
					h1 Why Casper?
					ul.build
						li Casper is higher level than PhantomJS
						li PhantomJS folks like Casper
						li SpookyJS (node) isn't maintained
						li You can evaluate JS in node sandbox with 'vm' module but not a complete browser

				article
					h1 CASPER ISN'T NODE

				article
					h2 Casper is it's own runtime
					ul.build
						li #!/usr/bin/env python starts python
						li #!/usr/bin/env ruby starts ruby
						li #!/usr/bin/env node starts node (v8)
						li #!/usr/bin/env casperjs starts casper (JavaScriptCore)

				article
					h2 Casper code drives a browser
					p Except stuff inside .evaluate(), which is run on the page
					pre.prettyprint
						code(data-lang="javascript").

							var searchCompany = 'Foo Inc.'

							casper.start('https://somesite.com/login');
							casper.userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36");
							casper.then(function(){
								this.fill('form[name=LoginForm]', {
									'username': config.username,
									'password': config.password
								}, true);
							});

							casper.waitForSelector('div.screenname', function() {
								screenName = this.evaluate(function(){
									return document.querySelector('div.screenname').innerText
								})
								log('screenname', screenName)
							});

							casper.then(function() {
								this.evaluate(function(searchCompany){
									document.querySelector('input.homepage-section-search-input-box').value = searchCompany;
								}, searchCompany)
							});

							casper.then(function() {
								this.mouseEvent('click', '#homepageSearchIcon')
							});

							casper.waitForSelector('#findCompaniesTab', function() {
							// Switch to the companies tab
								this.mouseEvent('click', '#findCompaniesTab');
							});

				article
					h2 CASPER SUPPORTS COMMONJS
					p JavaScript modules only

				article
					h2 TALK TO CASPER AS A MICROSERVICE
					p Using the 'webserver' commonjs module

				article
					p Use the 'webserver' module to make a Casper microservice:
					pre.prettyprint
						code(data-lang="javascript").
							#!/usr/bin/env casperjs
							var casper = require('casper').create();
							var server = require('webserver').create();
							var ipAndPort = '127.0.0.1:8585';

							server.listen(ipAndPort, function(request, response) {

							    casper.start('https://connect.data.com/login');
							    casper.userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36");
							    casper.then(function(){
							        // lots of code here, and a few more cassper.then()s
							    });

							    casper.run(function(){
							        console.log('\n\nFinished')
							        response.statusCode = 200;
							        var body = JSON.stringify({
							            phoneNumber: '1800-YOLO-SWAG'
							        })

							        response.write(body);
							        response.close();
							    });
							});$



				article
					h2 Someone doesn't want me to scrape!
					ul.build
						li Reconsider
						li Use a modern useragent
						li Check your referers and CSRF tokens
						li proxymesh.com - 280s IPs per day
						li Various things on GitHub can defeat CloudFlare

				article
					h1 Launching something?

				article
					h1 Â£80 quid off CertSimple

				article
					h1 Stickers!
					img(src='images/certsimple-stickers.png')

				article
					h1.big Thanks!
					h2 @mikemaccana
					h2 certsimple.com

				article
					h1 Links
					a(href="http://mikemaccana.github.io/scalpels-and-aks" target=_blank) This talk online!
					a(href="https://www.npmjs.com/package/request" target=_blank) Request cookies examples
					a(href="https://github.com/visionmedia/superagent/blob/master/test/node/agency.js" target=_blank) Superagent cookie examples
					a(href="https://github.com/cheeriojs/cheerio" target=_blank) Cheerio
					a(href="http://docs.casperjs.org/en/latest/quickstart.html" target=_blank) CasperJS quickstart




